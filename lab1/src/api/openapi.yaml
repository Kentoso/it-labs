openapi: 3.0.0
info:
  title: Simple DBMS API
  version: 1.0.0
servers:
  - url: http://localhost:5000

components:
  schemas:
    DatabaseCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the database to create
    TableCreate:
      type: object
      properties:
        table_name:
          type: string
          description: Name of the table to create
        schema:
          type: object
          additionalProperties:
            type: string
          description: "Schema of the table as a dictionary (field_name: field_type)"
    RowInsert:
      type: object
      additionalProperties:
        type: string
    RowUpdate:
      type: object
      properties:
        condition:
          type: object
          additionalProperties:
            type: string
          description: Condition to match rows to update as a dictionary
        new_values:
          type: object
          additionalProperties:
            type: string
          description: New values to update in the matched rows as a dictionary
    TableUnion:
      type: object
      properties:
        table1:
          type: string
          description: Name of the first table
        table2:
          type: string
          description: Name of the second table

paths:
  /databases:
    post:
      tags:
        - Databases
      summary: Create a new database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseCreate'
      responses:
        '200':
          description: Database created successfully
        '400':
          description: Database already exists

  /databases/{db_name}:
    get:
      tags:
        - Databases
      summary: Get details of a database
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Database found
        '404':
          description: Database not found
    delete:
      tags:
        - Databases
      summary: Delete a database
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Database deleted successfully
        '404':
          description: Database not found

  /databases/{db_name}/tables:
    post:
      tags:
        - Tables
      summary: Create a new table in a database
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableCreate'
      responses:
        '200':
          description: Table created successfully
        '400':
          description: Invalid schema or table already exists
    get:
      tags:
        - Tables
      summary: List all tables in a database
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of tables in the database
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Database not found

  /databases/{db_name}/tables/{table_name}/schema:
    get:
      tags:
        - Tables
      summary: Get the schema of a table
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
        - name: table_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Schema retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '404':
          description: Database or table not found

  /databases/{db_name}/tables/{table_name}/rows:
    post:
      tags:
        - Rows
      summary: Insert a row into a table
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
        - name: table_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowInsert'
      responses:
        '200':
          description: Row inserted successfully
        '400':
          description: Invalid row or table not found
    get:
      tags:
        - Rows
      summary: Select rows from a table
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
        - name: table_name
          in: path
          required: true
          schema:
            type: string
        - name: columns
          in: query
          required: false
          schema:
            type: string
            description: Comma-separated list of columns to select
      responses:
        '200':
          description: Rows selected successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        '404':
          description: Database or table not found
    put:
      tags:
        - Rows
      summary: Update rows in a table
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
        - name: table_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowUpdate'
      responses:
        '200':
          description: Rows updated successfully
        '400':
          description: Invalid condition or table not found
    delete:
      tags:
        - Rows
      summary: Delete rows from a table
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
        - name: table_name
          in: path
          required: true
          schema:
            type: string
        - name: condition
          in: query
          required: true
          schema:
            type: string
            description: Condition to match rows to delete (e.g., "id=5")
      responses:
        '200':
          description: Rows deleted successfully
        '400':
          description: Invalid condition or table not found

  /databases/{db_name}/tables/union:
    post:
      tags:
        - Tables
      summary: Perform a union operation between two tables
      parameters:
        - name: db_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableUnion'
      responses:
        '200':
          description: Union performed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        '400':
          description: Tables not found or schemas do not match