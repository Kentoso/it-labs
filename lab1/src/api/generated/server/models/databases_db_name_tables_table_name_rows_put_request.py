from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model import Model
from server import util


class DatabasesDbNameTablesTableNameRowsPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition=None, new_values=None):  # noqa: E501
        """DatabasesDbNameTablesTableNameRowsPutRequest - a model defined in OpenAPI

        :param condition: The condition of this DatabasesDbNameTablesTableNameRowsPutRequest.  # noqa: E501
        :type condition: object
        :param new_values: The new_values of this DatabasesDbNameTablesTableNameRowsPutRequest.  # noqa: E501
        :type new_values: object
        """
        self.openapi_types = {
            'condition': object,
            'new_values': object
        }

        self.attribute_map = {
            'condition': 'condition',
            'new_values': 'new_values'
        }

        self._condition = condition
        self._new_values = new_values

    @classmethod
    def from_dict(cls, dikt) -> 'DatabasesDbNameTablesTableNameRowsPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _databases__db_name__tables__table_name__rows_put_request of this DatabasesDbNameTablesTableNameRowsPutRequest.  # noqa: E501
        :rtype: DatabasesDbNameTablesTableNameRowsPutRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self) -> object:
        """Gets the condition of this DatabasesDbNameTablesTableNameRowsPutRequest.

        Condition to match rows to update  # noqa: E501

        :return: The condition of this DatabasesDbNameTablesTableNameRowsPutRequest.
        :rtype: object
        """
        return self._condition

    @condition.setter
    def condition(self, condition: object):
        """Sets the condition of this DatabasesDbNameTablesTableNameRowsPutRequest.

        Condition to match rows to update  # noqa: E501

        :param condition: The condition of this DatabasesDbNameTablesTableNameRowsPutRequest.
        :type condition: object
        """

        self._condition = condition

    @property
    def new_values(self) -> object:
        """Gets the new_values of this DatabasesDbNameTablesTableNameRowsPutRequest.

        New values to update in the matched rows  # noqa: E501

        :return: The new_values of this DatabasesDbNameTablesTableNameRowsPutRequest.
        :rtype: object
        """
        return self._new_values

    @new_values.setter
    def new_values(self, new_values: object):
        """Sets the new_values of this DatabasesDbNameTablesTableNameRowsPutRequest.

        New values to update in the matched rows  # noqa: E501

        :param new_values: The new_values of this DatabasesDbNameTablesTableNameRowsPutRequest.
        :type new_values: object
        """

        self._new_values = new_values
